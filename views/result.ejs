<!DOCTYPE html>
<html lang="en">
<head>
  <title>Admin Dashboard - Free Bootstrap 5 Sample | AppSeed</title>
  <link rel="canonical" href="https://blog.appseed.us/bootstrap-for-beginners-with-examples/">
  <meta charset="UTF-8">
  <meta http-equiv="X-UA-Compatible" content="IE=edge">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <!-- Bootstrap CSS -->
  <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
  <!-- Bootstrap CSS End -->
  <!-- Main CSS -->
  <link rel="stylesheet" href="/style.css">
  <!-- Main CSS End -->
  <!-- Bootstrap Icons Start -->
  <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.8.1/font/bootstrap-icons.css">
<!-- Bootstrap Icons End -->
  <!-- Bootstrap Icons End -->
  <link rel="stylesheet" href="/dark-mode.css">
</head>
<body>
<!-- Navbar Start -->
<nav class="navbar navbar-expand-lg navbar-dark fixed-top mb-5" style="background-color:#1e272d">
  <div class="container-fluid">
    <!-- Sidebar Trigger Start -->
    <button class="navbar-toggler me-2" type="button" data-bs-toggle="offcanvas" data-bs-target="#offcanvas" aria-controls="offcanvas"><span class="navbar-toggler-icon"></span></button>
    <!-- Sidebar Trigger End -->
    <a class="navbar-brand fw-bold me-auto" href="#">RANK PAGE</a>
    <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
      <span class="navbar-toggler-icon"></span>
    </button>
    <div class="collapse navbar-collapse" id="navbarSupportedContent">
      <form class="d-flex ms-auto">
        
        <div class="max-w-7xl px-4 py-6 bg-blue-300 sm:px-6 lg:px-8 hidden lg:block md:block">
          <!-- Use EJS syntax to dynamically set the image path -->
          <img class="flex-1 w-48 h-48 rounded-full shadow-lg" style="height:50px; border-radius: 50%" src="<%= imagePath %>" alt="hi">
        </div>
      </form>
      <ul class="navbar-nav mb-2 mb-lg-0">
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="navbarDropdown" role="button" data-bs-toggle="dropdown" aria-expanded="false">
            <i class="bi bi-person-square"></i>
          </a>
          <ul class="dropdown-menu dropdown-menu-end" aria-labelledby="navbarDropdown">
            <li><a class="dropdown-item" href="/login">Log out</a></li>
          </ul>
        </li>
      </ul>
    </div>
  </div>
</nav>
<!-- Navbar End -->
<!-- Sidebar Start -->
<div class="offcanvas offcanvas-start text-white side-bar" style="background-color: #93C5FD;" data-bs-scroll="true" tabindex="-1" id="offcanvas" aria-labelledby="offcanvas">
  <div class="offcanvas-body p-0">
    <nav class="navbar-dark">
      <ul class="navbar-nav">
        <li>
          <div class="text-muted small fw-bold text-uppercase px-3">Core</div>
        </li>
        <li>
          <a href="#" class="nav-link px-3 active">
            <span class="me-2">
              <i class="bi bi-wrench-adjustable-circle"></i>
            </span>
            <span class="fw-bold">Refresh</span>
          </a>
        </li>
        <li class="my-4">
          <hr class="dropdown-divider">
        </li>
        <li>
          <div class="text-muted small fw-bold text-uppercase px-3">Interface</div>
        </li>
        <li>
          <a href="/home" class="nav-link px-3">
            <span class="me-2">
              <i class="bi bi-archive"></i>
            </span>
            <span class="fw-bold" style="color:white;">Home Page</span>
          </a>
          <a href="javascript:void(0);" onclick="goBack()" class="nav-link px-3">
            <span class="me-2">
                <i class="bi bi-archive"></i>
            </span>
            <span class="fw-bold" style="color:white;">Role Page</span>
        </a>
        
        <script>
            function goBack() {
                window.history.back();
            }
        </script>
        </li>
        <li class="my-4">
          <hr class="dropdown-divider">
        </li>
        
        
        <li>
          <a href="#" class="nav-link px-3">
            <span class="me-2">
              <i class="bi bi-info-circle"></i>
            </span>
            Provided by
            <span class="fw-bold">CrossLang</span>
          </a>
        </li>
      </ul>
    </nav>
  </div>
</div>
<!-- Sidebar End -->
<!-- Main Content Start -->
<main class="mt-5 pt-3">
  <div class="container-fluid">
    <div class="row">
      <div class="col-md-12 fw-bold fs-3">#Test ID</div>
      <div class="col-md-6">
        <input type="text" class="form-control" id="testIdInput" placeholder="Enter Test ID">
      </div>
      
    </div>
    <div class="row mt-2">
      
      
      
    </div>
    <br>
    <div class="row mt-2">
      <div class="col-md-12">
        <div class="card-table">
          <div class="card-header">
            Test Statistics
          </div>
          <div class="card-body">
            <div class="table-responsive">
              <table id="example" class="table data-table" style="width:100%">
                <thead>
                    <tr>
                        <th>StudentID</th>
                        <th>Score</th>
                        <th>Status</th>
                        <th>Verify</th>
                    </tr>
                </thead>
                <tbody id="tableBody">
                  <% data.forEach(row => { %>
                    <tr>
                      <td><%= row.student_id %></td>
                      <td><%= (row.score)*100 %></td>
                      <td><%= row.status %></td>
                      <td>
                        <a href="#" style="color: black;" onclick="fetchAnswerScript('<%= row.student_id %>'); return false;">Verify</a>

                      </td>
                    </tr>
                  <% }); %>
                </tbody>
              </table>
            </div>
          </div>
        </div>
      </div>
    </div>
    <br>
  </div>
</main>
<!-- Main Content End -->
<!-- Scripts Start -->
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js@3.0.2/dist/chart.min.js"></script>
<script src="script.js"></script>
<script src="dark-mode-switch.min.js"></script>

<!-- Other HTML content of your EJS file -->

<!-- JavaScript for chart1 -->
<script>
  const charts1 = document.querySelectorAll(".chart1");

  charts1.forEach(function (chart) {
    var ctx = chart.getContext("2d");
    var myChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: ["<10", "<20", "<40", "<60", "<80", "80-100"],
        datasets: [
          {
            label: "# of candidates",
            data: [12, 19, 3, 5, 2, 3],
            backgroundColor: [
              "rgba(255, 99, 132, 0.2)",
              "rgba(54, 162, 235, 0.2)",
              "rgba(255, 206, 86, 0.2)",
              "rgba(75, 192, 192, 0.2)",
              "rgba(153, 102, 255, 0.2)",
              "rgba(255, 159, 64, 0.2)",
            ],
            borderColor: [
              "rgba(255, 99, 132, 1)",
              "rgba(54, 162, 235, 1)",
              "rgba(255, 206, 86, 1)",
              "rgba(75, 192, 192, 1)",
              "rgba(153, 102, 255, 1)",
              "rgba(255, 159, 64, 1)",
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  });
</script>

<!-- JavaScript for chart2 -->
<script>

  


  const charts2 = document.querySelectorAll(".chart2");

  charts2.forEach(function (chart) {
    var ctx = chart.getContext("2d");
    var myChart = new Chart(ctx, {
      type: "bar",
      data: {
        labels: ["<10", "<20", "<40", "<60", "<80", "80-100"],
        datasets: [
          {
            label: "# of candidates",
            data: [30, 19, 3, 5, 2, 3],
            backgroundColor: [
              "rgba(255, 99, 132, 0.2)",
              "rgba(54, 162, 235, 0.2)",
              "rgba(255, 206, 86, 0.2)",
              "rgba(75, 192, 192, 0.2)",
              "rgba(153, 102, 255, 0.2)",
              "rgba(255, 159, 64, 0.2)",
            ],
            borderColor: [
              "rgba(255, 99, 132, 1)",
              "rgba(54, 162, 235, 1)",
              "rgba(255, 206, 86, 1)",
              "rgba(75, 192, 192, 1)",
              "rgba(153, 102, 255, 1)",
              "rgba(255, 159, 64, 1)",
            ],
            borderWidth: 1,
          },
        ],
      },
      options: {
        scales: {
          y: {
            beginAtZero: true,
          },
        },
      },
    });
  });
</script>

<!-- Scripts End -->
<!-- JavaScript to fetch data from backend and populate the table -->
<script>
  // Variable to store the entered Test ID
  let currentTestId = null;

  function getUrlParameter(name) {
    name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
    var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
    var results = regex.exec(location.search);
    return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
  }

  // Get the test ID from URL parameters
  const testId = getUrlParameter('testId');
  // Set the test ID as the value of the input field
  document.getElementById('testIdInput').value = '<%= testId %>'; // This line is changed
  // Disable the input field
  document.getElementById('testIdInput').disabled = true;

  fetchData();

  // Function to fetch data from backend
  async function fetchData() {
    try {
      // Get the testId input value
      const testId = document.getElementById('testIdInput').value.trim(); 
      if (!testId) {
        alert("Please enter a valid Test ID");
        return;
      }

      // Store the entered Test ID
      currentTestId = testId;

      const response = await fetch(`http://localhost:3000/api/results/${testId}`);
      if (!response.ok) {
        throw new Error(`HTTP error! status: ${response.status}`);
      }

      const data = await response.json();
      console.log(data);
      
     
      //populateTable(data);
    } catch (error) {
      console.error('Error fetching data:', error);
    }
  }

  // Function to process the scores and calculate count in each range
  function processData(data) {
    const scoreCounts = {
      "<0.1": 0,
      "<0.2": 0,
      "<0.4": 0,
      "<0.6": 0,
      "0.8-1.0": 0
    };

    data.forEach(row => {
      const score = row.score;
      if (score < 0.1 ) {
        scoreCounts["<0.1"]++;
      } else if (score < 0.2) {
        scoreCounts["<0.2>"]++;
      } else if (score < 0.4) {
        scoreCounts["<0.4>"]++;
      } else if (score < 0.6) {
        scoreCounts["<0.6>"]++;
      } else if (score < 0.8) {
        scoreCounts["<0.8>"]++;
      } else {
        scoreCounts["0.8-1.0"]++;
      }
    });

    return scoreCounts;
  }

  // Function to populate the bar chart with data
  // Function to populate the bar chart with data
function populateChart(scoreCounts) {
  const labels = Object.keys(scoreCounts);
  const data = Object.values(scoreCounts);

  try {
    const ctx = document.getElementById('chart').getContext('2d');
    const myChart = new Chart(ctx, {
      type: 'bar',
      data: {
        labels: labels,
        datasets: [{
          label: '# of students',
          data: data,
          backgroundColor: [
            'rgba(255, 99, 132, 0.2)',
            'rgba(54, 162, 235, 0.2)',
            'rgba(255, 206, 86, 0.2)',
            'rgba(75, 192, 192, 0.2)',
            'rgba(153, 102, 255, 0.2)',
            'rgba(255, 159, 64, 0.2)'
          ],
          borderColor: [
            'rgba(255, 99, 132, 1)',
            'rgba(54, 162, 235, 1)',
            'rgba(255, 206, 86, 1)',
            'rgba(75, 192, 192, 1)',
            'rgba(153, 102, 255, 1)',
            'rgba(255, 159, 64, 1)'
          ],
          borderWidth: 1
        }]
      },
      options: {
        scales: {
          y: {
            beginAtZero: true
          }
        }
      }
    });
  } catch (error) {
    console.error('Error creating chart:', error);
  }
}

  // Function to fetch answer script based on student ID and test ID
  async function fetchAnswerScript(studentId) {
    try {
      // Ensure studentId and currentTestId are set
      if (!studentId || !currentTestId) {
        throw new Error('Student ID or Test ID is missing');
      }

      const response = await fetch(`http://localhost:3000/api/answer/${studentId}/${currentTestId}`);
      if (!response.ok) {
        throw new Error(`Failed to fetch answer script: ${response.statusText}`);
      }

      const blob = await response.blob();
      const url = window.URL.createObjectURL(blob);
      const newTab = window.open(url, '_blank');
      if (!newTab) {
        throw new Error('Popup blocked');
      }
    } catch (error) {
      console.error('Error fetching answer script:', error);
      // Display error to the user
      alert('Error fetching answer script. Please try again later.');
    }
  }

  // Function to populate the table with data
  function populateTable(data) {
    const tbody = document.getElementById('tableBody');
    tbody.innerHTML = '';
    data.forEach(row => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${row.student_id}</td>
        <td>${row.score}</td>
        <td>${row.status}</td>
        <td>
          <a href="#" style="color: black;" onclick="fetchAnswerScript(${row.student_id}); return false;">Verify</a>
        </td>
      `;
      tbody.appendChild(tr);
    });
  }

  // Function to populate the test ID field with the currentTestId value
  
    
  

  // Call the populateTestIdField function when the page loads
  

</script>

<!-- End of JavaScript -->
</body>
</html>
